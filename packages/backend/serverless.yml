service: ept-serverless-rest-api-with-dynamodb

frameworkVersion: '>=2.24.0'

plugins:
  - serverless-dynamodb-local
  - serverless-offline

custom:
  dynamodb:
    stages:
      - dev
    start:
      # docker: true
      port: 8000
      inMemory: true
      migrate: true
      seed: true
      sharedDb: true
      convertEmptyValues: true
      # uncomment if you already have a DynamoDB running locally
      noStart: true
      migration:
        dir: offline/migrations

    seed:
      domain:
        sources:
          - table: photos
            sources: [./seed/photos.json]

provider:
  name: aws
  runtime: nodejs18.x
  environment:
    DYNAMODB_TABLE: ${self:service}-${sls:stage}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: 'arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.DYNAMODB_TABLE}'

functions:
  list:
    handler: photos/list.list
    events:
      - http:
          path: photos
          method: get
          cors: true

resources:
  Resources:
    PhotosDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: orderCount
            AttributeType: N
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: orderCount
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
